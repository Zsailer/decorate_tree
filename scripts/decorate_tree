#!/usr/bin/env python

__author__ = "Zach Sailer"
__email__ = "zachsailer@gmail.com"

import argparse
from decorate_tree import *
import dendropy

def main(input_tree, output_tree, 
    taxon_data, 
    anc_data=None, 
    taxon_labels=["accver"], 
    anc_labels=[]):
    """"""
    # Load all data
    tree = dendropy.Tree.get(path=input_tree, schema="newick") # Read tree
    taxon_data = pd.read_csv(taxon_data, index_col="uid") # Read taxon dataframe
    if anc_data is not None:
        anc_data = pd.read_csv(anc_data, index_col="uid")
        
    # Decorate tree
    new_tree = decorate(tree, taxon_data, 
        anc_dataframe=anc_data, 
        taxon_labels=taxon_labels, 
        anc_labels=anc_labels)
    
    # Write tree to output file
    new_tree.write(path=output_tree, schema="nexus")
    
    
if __name__ == "__main__":
    # CLI handler
    parser = argparse.ArgumentParser(description="""Reroot a phylogenetic tree on branch
        with the minimal ancestor deviation.""")
    parser.add_argument("-i", type=str, help="Input tree file containing UID labels.")
    parser.add_argument("-o", type=str, help="Output file to write new, labeled tree.")
    parser.add_argument("-t", type=str, help="Taxon CSV file.")
    parser.add_argument("-a", default=None, type=str, help="Ancestor CSV file.")
    parser.add_argument("--tlabels", default=["accver"], nargs="+", type=str, help="Columns in taxon CSV file to map to tree")
    parser.add_argument("--alabels", default=[], type=str, nargs="+", help="Columns in ancestor CSV file to map to tree")

    # Parse the arguments
    args = parser.parse_args()

    # Run the main program
    main(args.i, args.o, 
         taxon_data=args.t, 
         anc_data=args.a, 
         taxon_labels=args.tlabels, 
         anc_labels=args.alabels)